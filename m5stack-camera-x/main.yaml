substitutions:
  node_name: cam-two

packages:
  node_base: !include ../common/node_base.yaml

esphome:
  platform: ESP32
  board: m5stack-timer-cam
  platformio_options:
    upload_speed: 115200
  # on_boot:
  #   then:
  #     pcf85063.read_time:

wifi:
  manual_ip:
    static_ip: 192.168.1.123

i2c:
  - id: rtc_bus
    scl: GPIO14
    sda: GPIO12

mqtt:
  id: mqtt_client
  broker: 192.168.1.105

# time:
#   - platform: pcf85063
#     id: pcf85063_time
#     update_interval: never
#   - platform: sntp
#     id: sntp_time
#     on_time_sync:
#       then:
#         pcf85063.write_time:

# deep_sleep:
#   run_duration: 20s
#   sleep_duration: 24h

# binary_sensor:
#   - platform: gpio
#     name: button
#     pin:
#       number: GPIO37
#       inverted: true
#     device_class: connectivity

# sensor:
#   - platform: adc
#     name: 'Battery Voltage'
#     pin: GPIO38
#     filters:
#       multiply: 3.3

# img_mqtt_packetput:
#   - platform: gpio
#     id: led_img_mqtt_packetput
#     pin: GPIO2

# light:
#   - platform: binary
#     name: led
#     img_mqtt_packetput: led_img_mqtt_packetput

# switch:
#   - platform: gpio
#     pin: GPIO33
#     name: 'Battery On'

esp32_camera:
  name: camera
  external_clock:
    pin: GPIO27
    frequency: 20MHz
  i2c_pins:
    sda: GPIO25
    scl: GPIO23
  data_pins: [GPIO32, GPIO35, GPIO34, GPIO5, GPIO39, GPIO18, GPIO36, GPIO19]
  vsync_pin: GPIO22
  href_pin: GPIO26
  pixel_clock_pin: GPIO21
  reset_pin: GPIO15

  # resolution: 1024x768
  max_framerate: 2fps

  on_image:
    then:
      - lambda: |-
            uint16_t max_packet_len = 1000;

            uint16_t img_start_index = 0;
            uint16_t img_end_index = max_packet_len;
            while (img_start_index < image.length) {
              std::string img_mqtt_packet;
  
              for (uint16_t i = img_start_index; i < img_end_index; i++) {
                img_mqtt_packet = img_mqtt_packet.append(format_hex(image.data[i]));
              }

              delay(0);
              bool result = id(mqtt_client).publish("cam/image", img_mqtt_packet);
              ESP_LOGD("main", "len %d, done %d", img_mqtt_packet.length(), result);

              img_start_index += max_packet_len;
              img_end_index = (img_end_index + max_packet_len) > image.length ? image.length : img_end_index + max_packet_len;
            }
