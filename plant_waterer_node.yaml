substitutions:
  node_name: plant_waterer

esphome:
  platform: ESP8266
  board: nodemcuv2

packages:
  node_base: !include common/node_base.yaml

wifi:
  manual_ip:
    static_ip: 192.168.0.121

mcp23008:
  - id: mcp23008_hub
    address: 0x20

time:
  - platform: sntp
    id: sntp_time
    on_time:
      - seconds: 0
        minutes: 0
        hours: 10
        days_of_week: THU
        then:
          - if:
              condition:
                switch.is_on: watering_enabled
              then:
                - script.execute: run_pump_for_five_min

output:
  # motor controls
  - platform: esp8266_pwm
    pin: D5
    id: speed_pin_m1
  - platform: gpio
    id: direction_pin0_m1
    pin:
      mcp23xxx: mcp23008_hub
      number: 7
      mode: OUTPUT
  - platform: gpio
    id: direction_pin1_m1
    pin:
      mcp23xxx: mcp23008_hub
      number: 6
      mode: OUTPUT
  # relay controls
  - platform: gpio
    id: relay1
    pin:
      mcp23xxx: mcp23008_hub
      number: 5
      mode: OUTPUT
      inverted: true
  - platform: gpio
    id: relay2
    pin:
      mcp23xxx: mcp23008_hub
      number: 4
      mode: OUTPUT
      inverted: true
  - platform: gpio
    id: relay3
    pin:
      mcp23xxx: mcp23008_hub
      number: 3
      mode: OUTPUT
      inverted: true

switch:
  - platform: template
    id: watering_enabled
    name: '${node_name} watering enabled'
    assumed_state: true
    restore_state: true
    optimistic: true

  - platform: template
    id: run_pump
    name: '${node_name} run five min'
    optimistic: true
    turn_on_action:
      - script.execute: run_pump_for_five_min
    turn_off_action:
      - script.stop: run_pump_for_five_min

  # pump control
  - platform: template
    id: switch_pump
    name: '${node_name} pump'
    optimistic: true
    turn_on_action:
      - script.execute: start_pump
    turn_off_action:
      - script.execute: stop_pump
  # relay controls
  - platform: output
    name: '${node_name} relay 1'
    output: relay1
  - platform: output
    name: '${node_name} relay 2'
    output: relay2
  - platform: output
    name: '${node_name} relay 3'
    output: relay3

sensor:
  - platform: ultrasonic
    id: ultrasonic_sensor
    trigger_pin: D6 # blue
    echo_pin: D4 # green 
  
  - platform: template
    name: '${node_name} water level'
    lambda: |-
      return (27 - (id(ultrasonic_sensor).state * 100)) * 100 / (27 - 4.5);

binary_sensor:
  - platform: gpio
    id: water_leak_sensor
    device_class: moisture
    name: '${node_name} water leak'
    pin: 
      number: D7
      inverted: true
    filters:
      - delayed_on_off: 1s

script:
  - id: start_pump
    then:
      - output.turn_on: direction_pin0_m1
      - output.turn_off: direction_pin1_m1
      - output.set_level:
          id: speed_pin_m1
          level: 100%
      - delay: 0.1s
      - output.set_level:
          id: speed_pin_m1
          level: 50%

  - id: stop_pump
    then:
      - output.turn_off: direction_pin0_m1
      - output.turn_off: direction_pin1_m1
      - output.set_level:
          id: speed_pin_m1
          level: 0

  - id: run_pump_for_five_min
    then:
      - switch.turn_on: switch_pump
      - delay: 5min
      - switch.turn_off: switch_pump